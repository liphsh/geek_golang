// Code generated by protoc-gen-go. DO NOT EDIT.
// source: userinfo.proto

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	userinfo.proto

It has these top-level messages:
	LoginRequest
	LoginResponse
	CommRequest
	EditRequest
	EditResponse
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

type LoginRequest struct {
	// user name
	Username string `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	// passwd
	Passwd string `protobuf:"bytes,2,opt,name=passwd" json:"passwd,omitempty"`
}

func (m *LoginRequest) Reset()                    { *m = LoginRequest{} }
func (m *LoginRequest) String() string            { return proto1.CompactTextString(m) }
func (*LoginRequest) ProtoMessage()               {}
func (*LoginRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *LoginRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *LoginRequest) GetPasswd() string {
	if m != nil {
		return m.Passwd
	}
	return ""
}

type LoginResponse struct {
	// user name
	Username string `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	Nickname string `protobuf:"bytes,2,opt,name=nickname" json:"nickname,omitempty"`
	// head url
	Headurl string `protobuf:"bytes,3,opt,name=headurl" json:"headurl,omitempty"`
	// token
	Token string `protobuf:"bytes,4,opt,name=token" json:"token,omitempty"`
	// result code
	Code uint32 `protobuf:"varint,5,opt,name=code" json:"code,omitempty"`
	// result msg
	Msg string `protobuf:"bytes,6,opt,name=msg" json:"msg,omitempty"`
}

func (m *LoginResponse) Reset()                    { *m = LoginResponse{} }
func (m *LoginResponse) String() string            { return proto1.CompactTextString(m) }
func (*LoginResponse) ProtoMessage()               {}
func (*LoginResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *LoginResponse) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *LoginResponse) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *LoginResponse) GetHeadurl() string {
	if m != nil {
		return m.Headurl
	}
	return ""
}

func (m *LoginResponse) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *LoginResponse) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *LoginResponse) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type CommRequest struct {
	// token
	Token string `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
	// username
	Username string `protobuf:"bytes,2,opt,name=username" json:"username,omitempty"`
}

func (m *CommRequest) Reset()                    { *m = CommRequest{} }
func (m *CommRequest) String() string            { return proto1.CompactTextString(m) }
func (*CommRequest) ProtoMessage()               {}
func (*CommRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *CommRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *CommRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

type EditRequest struct {
	// username
	Username string `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	// token
	Token string `protobuf:"bytes,2,opt,name=token" json:"token,omitempty"`
	// nickname
	Nickname string `protobuf:"bytes,3,opt,name=nickname" json:"nickname,omitempty"`
	// headurl
	Headurl string `protobuf:"bytes,4,opt,name=headurl" json:"headurl,omitempty"`
	// edit mode
	// 1 for nickname; 2 for headurl; 3 for all
	Mode uint32 `protobuf:"varint,5,opt,name=mode" json:"mode,omitempty"`
}

func (m *EditRequest) Reset()                    { *m = EditRequest{} }
func (m *EditRequest) String() string            { return proto1.CompactTextString(m) }
func (*EditRequest) ProtoMessage()               {}
func (*EditRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *EditRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *EditRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *EditRequest) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *EditRequest) GetHeadurl() string {
	if m != nil {
		return m.Headurl
	}
	return ""
}

func (m *EditRequest) GetMode() uint32 {
	if m != nil {
		return m.Mode
	}
	return 0
}

type EditResponse struct {
	Code uint32 `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg" json:"msg,omitempty"`
}

func (m *EditResponse) Reset()                    { *m = EditResponse{} }
func (m *EditResponse) String() string            { return proto1.CompactTextString(m) }
func (*EditResponse) ProtoMessage()               {}
func (*EditResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *EditResponse) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *EditResponse) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func init() {
	proto1.RegisterType((*LoginRequest)(nil), "proto.loginRequest")
	proto1.RegisterType((*LoginResponse)(nil), "proto.loginResponse")
	proto1.RegisterType((*CommRequest)(nil), "proto.commRequest")
	proto1.RegisterType((*EditRequest)(nil), "proto.editRequest")
	proto1.RegisterType((*EditResponse)(nil), "proto.editResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for UserService service

type UserServiceClient interface {
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	GetUserInfo(ctx context.Context, in *CommRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	EditUserInfo(ctx context.Context, in *EditRequest, opts ...grpc.CallOption) (*EditResponse, error)
	Logout(ctx context.Context, in *CommRequest, opts ...grpc.CallOption) (*EditResponse, error)
}

type userServiceClient struct {
	cc *grpc.ClientConn
}

func NewUserServiceClient(cc *grpc.ClientConn) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := grpc.Invoke(ctx, "/proto.UserService/login", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUserInfo(ctx context.Context, in *CommRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := grpc.Invoke(ctx, "/proto.UserService/getUserInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) EditUserInfo(ctx context.Context, in *EditRequest, opts ...grpc.CallOption) (*EditResponse, error) {
	out := new(EditResponse)
	err := grpc.Invoke(ctx, "/proto.UserService/editUserInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Logout(ctx context.Context, in *CommRequest, opts ...grpc.CallOption) (*EditResponse, error) {
	out := new(EditResponse)
	err := grpc.Invoke(ctx, "/proto.UserService/logout", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserService service

type UserServiceServer interface {
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	GetUserInfo(context.Context, *CommRequest) (*LoginResponse, error)
	EditUserInfo(context.Context, *EditRequest) (*EditResponse, error)
	Logout(context.Context, *CommRequest) (*EditResponse, error)
}

func RegisterUserServiceServer(s *grpc.Server, srv UserServiceServer) {
	s.RegisterService(&_UserService_serviceDesc, srv)
}

func _UserService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UserService/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UserService/GetUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserInfo(ctx, req.(*CommRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_EditUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).EditUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UserService/EditUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).EditUserInfo(ctx, req.(*EditRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UserService/Logout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Logout(ctx, req.(*CommRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "login",
			Handler:    _UserService_Login_Handler,
		},
		{
			MethodName: "getUserInfo",
			Handler:    _UserService_GetUserInfo_Handler,
		},
		{
			MethodName: "editUserInfo",
			Handler:    _UserService_EditUserInfo_Handler,
		},
		{
			MethodName: "logout",
			Handler:    _UserService_Logout_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "userinfo.proto",
}

func init() { proto1.RegisterFile("userinfo.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 333 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0xcf, 0x4e, 0xbb, 0x40,
	0x10, 0xfe, 0x2d, 0x05, 0x7e, 0x75, 0x68, 0x8d, 0x99, 0x36, 0x66, 0xc3, 0xa9, 0xe1, 0xd4, 0x53,
	0x0f, 0xb6, 0x17, 0x4f, 0x26, 0xde, 0xbc, 0xd6, 0xf8, 0x00, 0x15, 0xa6, 0x48, 0x5a, 0x76, 0x2b,
	0x0b, 0xfa, 0x0c, 0x3e, 0x84, 0xaf, 0xe8, 0x33, 0x18, 0x16, 0xd8, 0x2c, 0xb6, 0x36, 0x9e, 0x98,
	0x6f, 0xfe, 0x7c, 0x3b, 0xdf, 0xc7, 0xc0, 0x65, 0xa5, 0xa8, 0xc8, 0xc4, 0x56, 0x2e, 0x0e, 0x85,
	0x2c, 0x25, 0x7a, 0xfa, 0x13, 0xdd, 0xc3, 0x68, 0x2f, 0xd3, 0x4c, 0xac, 0xe9, 0xb5, 0x22, 0x55,
	0x62, 0x08, 0xc3, 0xba, 0x51, 0x6c, 0x72, 0xe2, 0x6c, 0xc6, 0xe6, 0x17, 0x6b, 0x83, 0xf1, 0x1a,
	0xfc, 0xc3, 0x46, 0xa9, 0xf7, 0x84, 0x3b, 0xba, 0xd2, 0xa2, 0xe8, 0x93, 0xc1, 0xb8, 0x25, 0x51,
	0x07, 0x29, 0x14, 0x9d, 0x65, 0x09, 0x61, 0x28, 0xb2, 0x78, 0xa7, 0x6b, 0x0d, 0x8f, 0xc1, 0xc8,
	0xe1, 0xff, 0x0b, 0x6d, 0x92, 0xaa, 0xd8, 0xf3, 0x81, 0x2e, 0x75, 0x10, 0xa7, 0xe0, 0x95, 0x72,
	0x47, 0x82, 0xbb, 0x3a, 0xdf, 0x00, 0x44, 0x70, 0x63, 0x99, 0x10, 0xf7, 0x66, 0x6c, 0x3e, 0x5e,
	0xeb, 0x18, 0xaf, 0x60, 0x90, 0xab, 0x94, 0xfb, 0xba, 0xaf, 0x0e, 0xa3, 0x3b, 0x08, 0x62, 0x99,
	0xe7, 0x9d, 0x44, 0x43, 0xc5, 0x6c, 0x2a, 0x7b, 0x65, 0xa7, 0xbf, 0x72, 0xf4, 0xc1, 0x20, 0xa0,
	0x24, 0x2b, 0xff, 0x62, 0x92, 0x61, 0x77, 0x7e, 0xb0, 0x1b, 0xd1, 0x83, 0xdf, 0x45, 0xbb, 0x7d,
	0xd1, 0x08, 0x6e, 0x6e, 0xc9, 0xab, 0xe3, 0x68, 0x05, 0xa3, 0x66, 0x95, 0xd6, 0xea, 0xce, 0x02,
	0x76, 0x6c, 0x81, 0x63, 0x2c, 0xb8, 0xf9, 0x62, 0x10, 0x3c, 0x29, 0x2a, 0x1e, 0xa9, 0x78, 0xcb,
	0x62, 0xc2, 0x15, 0x78, 0xfa, 0x8f, 0xe1, 0xa4, 0x39, 0x87, 0x85, 0x7d, 0x04, 0xe1, 0xb4, 0x9f,
	0x6c, 0x5e, 0x8a, 0xfe, 0xe1, 0x2d, 0x04, 0x29, 0x95, 0x35, 0xcf, 0x83, 0xd8, 0x4a, 0xc4, 0xb6,
	0xcd, 0x32, 0xf7, 0xcc, 0xa8, 0x5e, 0xfb, 0x68, 0xd6, 0xb2, 0x35, 0x9c, 0xf4, 0x72, 0x66, 0x74,
	0x09, 0xfe, 0x5e, 0xa6, 0xb2, 0x2a, 0x4f, 0x3e, 0x78, 0x7a, 0xe8, 0xd9, 0xd7, 0xd9, 0xe5, 0x77,
	0x00, 0x00, 0x00, 0xff, 0xff, 0xd4, 0x07, 0x98, 0x6c, 0xf7, 0x02, 0x00, 0x00,
}
